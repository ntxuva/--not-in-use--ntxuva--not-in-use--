<?php
/**
 * @file
 * Ntxuva-Mopa logic module.
 * This module provides styles, scripts and views for Ntxuva-Mopa Installation
 * and implements some server-side validation and geocoding
 */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 */
function ntxuva_logic_form_report_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  unset($form['field_status'][LANGUAGE_NONE]['#options']['_none']);
  $form['field_address'][LANGUAGE_NONE][0]['value']['#type'] = "hidden";
  // Registered users' mail will be prefilled:
  if (isset($user->mail) && arg(0) == 'node' && arg(1) == 'add') {
    $form['field_e_mail'][LANGUAGE_NONE][0]['value']['#default_value'] = $user->mail;
  }
  $form['#validate'][] = 'ntxuva_logic_validate';
}

/**
 * Form validation handler for report form.
 *
 * @see ntxuva_logic_form_report_node_form_alter()
 */
function ntxuva_logic_validate($form, &$form_state) {

  $mail = $form_state['values']['field_e_mail'][LANGUAGE_NONE][0]['value'];

  if (!valid_email_address($mail)) {
    form_set_error('field_e_mail', t('Please enter a valid e-mail address.'));
  }

  $validate_cities = explode(",", variable_get('ntxuva_logic_city'));

  // Transform cities into a readable string.
  if (count(array_keys($validate_cities)) > 1) {
    $area_cities = $validate_cities;
    $last_element = array_pop($area_cities);
    $area = implode(", ", $area_cities);
    $area = $area . ' ' . t('or') . ' ' . $last_element;
  }
  else {
    $area = $validate_cities[0];
  }
  // Iterate through all strings.
  $valid = array();

  foreach ($validate_cities as $validate_city) {
    $valid[] = strstr($form_state['values']['field_geo'][LANGUAGE_NONE][0]['address']['field'], $validate_city) ? TRUE : FALSE;
  }

  if (!in_array(TRUE, $valid)) {
    form_set_error('field_geo', t('Sorry, we only operate in the following areas: @area', array('@area' => $area)));
  }

  /* Bounding Box */
  $lat = $form_state['values']['field_geo'][LANGUAGE_NONE][0]['lat'];
  $lon = $form_state['values']['field_geo'][LANGUAGE_NONE][0]['lng'];

  $north_west = FALSE;
  $south_east = FALSE;

  $bbox = array(
    'nw' => array(
      'lat' => variable_get('ntxuva_logic_bbox_nw_lat'),
      'lng' => variable_get('ntxuva_logic_bbox_nw_lng'),
    ),
    'se' => array(
      'lat' => variable_get('ntxuva_logic_bbox_se_lat'),
      'lng' => variable_get('ntxuva_logic_bbox_se_lng'),
    ),
  );

  if (($bbox['nw']['lat'] >= $lat) && ($bbox['nw']['lng'] <= $lon)) {
    $north_west = TRUE;
  }
  if (($bbox['se']['lat'] <= $lat) && ($bbox['se']['lng'] >= $lon)) {
    $south_east = TRUE;
  }

  if ($south_east == FALSE || $north_west == FALSE) {
    form_set_error('field_geo', t('The position does not seem to be inside a valid bounding box in @area',
      array('@area' => $area)));
  }
  else {
    // Fill the address field only, if it's not equal to the initial value:
    if ($form_state['values']['field_geo'][LANGUAGE_NONE][0]['lat'] != variable_get('ntxuva_logic_ini_lat')) {
      $form_state['values']['field_address'][LANGUAGE_NONE][0]['value'] = $form_state['values']['field_geo'][LANGUAGE_NONE][0]['address']['field'];
    }
    else {
      form_set_error('field_geo', t('Please enter a location, different from the default one'));
    }
  }
}

/**
 * Implements hook_help().
 */
function  ntxuva_logic_help($path, $arg) {
  switch ($path) {
    // Main help for Ntxuva-Mopa.
    case 'admin/config/system/ntxuva_mopa':
      $output = '';
      $output .= '<h3>' . t('Ntxuva-Mopa Basic Settings') . '</h3>';
      $output .=  '<p>' . t('Before you get started, you maybe want to change the <a href="@categories">Categories</a> and the
            <a href="@status">Status</a> of your platform.</p>',
        array('@categories' => url('admin/structure/taxonomy/category'), '@status' => url('admin/structure/taxonomy/status'))) . '</p>';
      if (module_exists('ntxuva_open311_client')){
        $output .= '<p>' . t('The <a href="@client">Open311 Client module</a> has been enabled. Please
            checkout the <a href="@client">module\'s administration page</a>.',
            array('@client' => url('admin/config/system/ntxuva_mopa/mopa_open311_client'))) . '</p>';
      }
      return $output;
  }
}


/**
 * Implements hook_page_build().
 *
 * - adds some php information to js
 * - adds css
 * - needs refactoring for leaflet
 */
function ntxuva_logic_page_build(&$page) {
  $node = menu_get_object();
  $type = (isset($node)) ? $node->type : NULL;
  drupal_add_js(array(
    'mopa' => array(
      'ntxuva_address' => variable_get('ntxuva_logic_address'),
      'ntxuva_city' => variable_get('ntxuva_logic_city'),
      'ntxuva_ini_lat' => variable_get('ntxuva_logic_ini_lat'),
      'ntxuva_ini_lng' => variable_get('ntxuva_logic_ini_lng'),
      'ntxuva_map_type' => variable_get('ntxuva_logic_map_type'),
      'ntxuva_radar_zoom' => variable_get('ntxuva_logic_radar_zoom'),
      'ntxuva_locate_marker_color' => variable_get('ntxuva_locate_marker_color'),
      'ntxuva_locate_icon_color' => variable_get('ntxuva_locate_icon_color'),
      'ntxuva_locate_zoom' => variable_get('ntxuva_locate_zoom'),
      'bbox_nw_lat' => variable_get('ntxuva_logic_bbox_nw_lat'),
      'bbox_nw_lng' => variable_get('ntxuva_logic_bbox_nw_lng'),
      'bbox_se_lat' => variable_get('ntxuva_logic_bbox_se_lat'),
      'bbox_se_lng' => variable_get('ntxuva_logic_bbox_se_lng'),
      'uri' => request_uri(),
      'node_type' => $type,
      'params' => $_GET,
    ),
  ), 'setting');

  if (variable_get('ntxuva_logic_map_type') == 1) {
    drupal_add_js(array(
      'mopa' => array(
        'mapbox_map_id' => variable_get('ntxuva_logic_mapbox_map_id'),
      ),
    ), 'setting');
  }
  else {
    drupal_add_js(array(
      'mopa' => array(
        'osm_custom_tile_url' => variable_get('ntxuva_logic_osm_custom_tile_url'),
        'osm_custom_attribution' => variable_get('ntxuva_logic_osm_custom_attribution'),
      ),
    ), 'setting');
  }

  drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.awesome-markers/dist/leaflet.awesome-markers.css');
  // drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/ntxuva-font/style.css');

  if (arg(0) == "list" || arg(0) == "map" || drupal_is_front_page() == TRUE) {
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/spin.js/spin.js', NULL);
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet/leaflet.js');
    drupal_add_js(drupal_get_path('module', 'ntxuva_logic') . '/js/markers_leaflet.js');
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.awesome-markers/dist/leaflet.awesome-markers.min.js', NULL);
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.markercluster/dist/leaflet.markercluster.js', NULL);

    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/bootbox/bootbox.min.js', NULL);
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/waypoints/lib/jquery.waypoints.min.js', NULL);
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/waypoints/lib/shortcuts/inview.min.js', NULL);

    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet/leaflet.css');
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet/leaflet.ie.css', array(
      'group' => CSS_THEME,
      'browsers' => array(
        'IE' => 'lte IE 8',
        '!IE' => FALSE,
      ),
    ));
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.css');
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.Default.css');
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.markercluster/dist/MarkerCluster.Default.ie.css', array(
      'group' => CSS_THEME,
      'browsers' => array(
        'IE' => 'lte IE 8',
        '!IE' => FALSE,
      ),
    ));


    if (variable_get('ntxuva_logic_map_type') == 0) {
      drupal_add_js('https://maps.google.com/maps/api/js?sensor=true', 'external');
      drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet-plugins/layer/tile/Google.js', NULL);
    }



  }

  if (strstr(current_path(), 'system/ntxuva_mopa')) {
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet/leaflet.css');
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet/leaflet.js');
    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.draw/dist/leaflet.draw.js', NULL);
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/Leaflet.draw/dist/leaflet.draw.css');

    drupal_add_js(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet-locatecontrol/src/L.Control.Locate.js', NULL);
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet-locatecontrol/src/L.Control.Locate.css');
    drupal_add_css(drupal_get_path('profile', 'ntxuva') . '/libraries/leaflet-locatecontrol/src/L.Control.Locate.ie.css',     array(
      'group' => CSS_THEME,
      'browsers' => array(
        'IE' => 'lte IE 8',
        '!IE' => FALSE,
      ),
    ));



    drupal_add_js(drupal_get_path('module', 'ntxuva_logic') . '/js/ntxuva_logic.js');
    drupal_add_css(drupal_get_path('module', 'ntxuva_logic') . '/css/ntxuva_logic.css');

  };

  drupal_add_css(drupal_get_path('module', 'custom') . '/css/custom.css', array(
    'group' => CSS_DEFAULT,
    'every_page' => TRUE,
  ));
  drupal_add_css(drupal_get_path('module', 'ntxuva_logic') . '/css/mopa-style.css');
}


/**
 * Implements hook_menu().
 *
 * - Callback to feedback page accessible for all
 * - Menu item for system settings page accessible for admins
 */
function ntxuva_logic_menu() {
  $items = array();

  $items['admin/config/system/ntxuva_mopa'] = array(
    'title' => 'Ntxuva-Mopa',
    'description' => 'Basic configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ntxuva_logic_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),

  );
  $items['admin/config/system/ntxuva_mopa/tweets/import'] = array(
    'title' => 'Manual twitter import',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Manual twitter import',
    'page callback' => '_ntxuva_tweet311_import_manual',
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'ntxuva_tweet311.module',
    'file path' => drupal_get_path('module', 'ntxuva_tweet311'),
  );

  return $items;
}


/**
 * Implements hook_admin_settings().
 */
function ntxuva_logic_admin_settings() {

  $zoom_options = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);


  $form['settings'] = array(
    '#type' => 'vertical_tabs',
  );
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General settings, intial location, validation'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    // '#group' => 'settings',
    '#weight' => '-100',
  );
  $form['general']['ntxuva_logic_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Initial Address'),
    '#default_value' => variable_get('ntxuva_logic_address', ntxuva_logic_defaults('ntxuva_logic_address')),
    '#size' => '128',
    '#maxlength' => 128,
    '#description' => t('Insert the initial address'),
  );

  $form['general']['ntxuva_logic_city'] = array(
    '#type' => 'textarea',
    '#title' => t('Validation of City Name Strings'),
    '#default_value' => variable_get('ntxuva_logic_city', ntxuva_logic_defaults('ntxuva_logic_city')),
    '#size' => '16',
    '#description' => t('Insert a comma separated list of valid names, this installation is built for, eg. "New York, NY, Big Apple"'),
  );

  $form['general']['ntxuva_logic_ini_lat'] = array(
    '#type' => 'textfield',
    '#title' => t('Inital Lat'),
    '#default_value' => variable_get('ntxuva_logic_ini_lat', ntxuva_logic_defaults('ntxuva_logic_ini_lat')),
    '#size' => '16',
    '#maxlength' => 32,
    '#description' => t('Insert the initial latitude'),
  );
  $form['general']['ntxuva_logic_ini_lng'] = array(
    '#type' => 'textfield',
    '#title' => t('Inital Lng'),
    '#default_value' => variable_get('ntxuva_logic_ini_lng', ntxuva_logic_defaults('ntxuva_logic_ini_lng')),
    '#size' => '16',
    '#maxlength' => 32,
    '#description' => t('Insert the initial longitude'),
  );
  $form['list'] = array(
    '#type' => 'fieldset',
    '#title' => t('Report List Settings'),
    '#collapsible' => TRUE,
    '#description' => t('Settings for the list view of Ntxuva-Mopa'),
    '#group' => 'settings',
  );
  $form['list']['ntxuva_locate_zoom'] = array(
    '#type' => 'select',
    '#title' => t('Choose the map\'s zoom factor when panning while scrolling the list view.'),
    '#default_value' => variable_get('ntxuva_locate_zoom', ntxuva_logic_defaults('ntxuva_locate_zoom')),
    '#options' => $zoom_options,
  );
  $form['list']['ntxuva_locate_marker_color'] = array(
    '#type' => 'select',
    '#title' => t('Choose the background color of the "located" marker when scrolling the list view'),
    '#default_value' => variable_get('ntxuva_locate_marker_color', ntxuva_logic_defaults('ntxuva_locate_marker_color')),
    '#options' => array('red' => 'red', 'darkred' => 'darkred', 'lightred' => 'lightred', 'orange' => 'orange', 'beige' => 'beige', 'green' => 'green', 'darkgreen' => 'darkgreen', 'lightgreen' => 'lightgreen', 'blue' => 'blue', 'darkblue' => 'darkblue', 'lightblue ' => 'lightblue', 'purple' => 'purple', 'darkpurple' => 'darkpurple', 'pink' => 'pink', 'cadetblue' => 'cadetblue', 'white' => 'white', 'gray' => 'gray', 'lightgray' => 'lightgray', 'black' => 'black'
    ),
  );
  $form['list']['ntxuva_locate_icon_color'] = array(
    '#type' => 'select',
    '#title' => t('Choose the icon color of the "located" marker when scrolling the list view'),
    '#default_value' => variable_get('ntxuva_locate_icon_color', ntxuva_logic_defaults('ntxuva_locate_icon_color')),
    '#options' => array('red' => 'red', 'darkred' => 'darkred', 'lightred' => 'lightred', 'orange' => 'orange', 'beige' => 'beige', 'green' => 'green', 'darkgreen' => 'darkgreen', 'lightgreen' => 'lightgreen', 'blue' => 'blue', 'darkblue' => 'darkblue', 'lightblue ' => 'lightblue', 'purple' => 'purple', 'darkpurple' => 'darkpurple', 'pink' => 'pink', 'cadetblue' => 'cadetblue', 'white' => 'white', 'gray' => 'gray', 'lightgray' => 'lightgray', 'black' => 'black'
    ),
  );

  $form['types'] = array(
    '#type' => 'fieldset',
    '#title' => t('Map Types'),
    '#collapsible' => TRUE,
    '#description' => t('This setting allow you too choose a map tile operator of your choose. Be aware that you have to apply the same for the <a href="@field-geo-page">Geolocation Field settings</a>, too.', array('@field-geo-page' => url('admin/structure/types/manage/report/fields/field_geo'))),
    '#group' => 'settings',
  );
  $form['types']['ntxuva_logic_map_type'] = array(
    '#type' => 'radios',
    '#title' => t('Map type'),
    '#default_value' => variable_get('ntxuva_logic_map_type', 0),
    '#options' => array(t('Google Maps'), t('Mapbox'), t('Other OSM')),
  );
  $form['types']['ntxuva_logic_mapbox_map_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Mapbox Map ID'),
    '#default_value' => variable_get('ntxuva_logic_mapbox_map_id'),
    '#description' => t('Insert your Map ID (e.g. ntxuva.Ejs23a) here'),
  );
  $form['types']['osm']['ntxuva_logic_osm_custom_tile_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Tile URL, if not from Mapbox'),
    '#default_value' => variable_get('ntxuva_logic_osm_custom_tile_url', ntxuva_logic_defaults('ntxuva_logic_osm_custom_tile_url')),
    '#description' => t('If you want to use a different tile service, enter the url pattern, e.g. http://{s}.somedomain.com/your-api-key/{z}/{x}/{y}.png'),
  );
  $form['types']['osm']['ntxuva_logic_osm_custom_attribution'] = array(
    '#type' => 'textarea',
    '#title' => t('Attribution Statement, if not from Mapbox'),
    '#default_value' => variable_get('ntxuva_logic_osm_custom_attribution', ntxuva_logic_defaults('ntxuva_logic_osm_custom_attribution')),
    '#description' => t('If you use an alternative Operator for serving tiles show special attribution'),
  );

  $form['bbox'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bounding Box'),
    '#collapsible' => TRUE,
    '#description' => t('Draw a rectancle (click on the black box) in the map to mark the boundaries for valid reports') . '<div id="map-wrapper"><div id="settings-map"></div></div>',
    '#group' => 'settings',
    '#weight' =>  -10,
  );

  $form['bbox']['ntxuva_logic_bbox_nw_lat'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('ntxuva_logic_bbox_nw_lat', ntxuva_logic_defaults('ntxuva_logic_bbox_nw_lat')),
    '#title' => t('North-West latitude.'),
  );
  $form['bbox']['ntxuva_logic_bbox_nw_lng'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('ntxuva_logic_bbox_nw_lng', ntxuva_logic_defaults('ntxuva_logic_bbox_nw_lng')),
    '#title' => t('North-West longitude.'),
  );

  $form['bbox']['ntxuva_logic_bbox_se_lat'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('ntxuva_logic_bbox_se_lat', ntxuva_logic_defaults('ntxuva_logic_bbox_se_lat')),
    '#title' => t('South-East latitude.'),
  );
  $form['bbox']['ntxuva_logic_bbox_se_lng'] = array(
    '#type' => 'textfield',
    '#size' => '10',
    '#default_value' => variable_get('ntxuva_logic_bbox_se_lng', ntxuva_logic_defaults('ntxuva_logic_bbox_se_lng')),
    '#title' => t('South-East longitude.'),
  );
  if (module_exists('ntxuva_open311')) {
    $form['open311'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open311 Settings and Service Discovery'),
      '#collapsible' => TRUE,
      '#description' => t('Configure the Open311 Server Settings (status, publishing settings and Georeport v2 Service Discovery). See http://wiki.open311.org/Service_Discovery. This service discovery specification is meant to be read-only and can be provided either dynamically or using a manually edited static file.'),
      '#group' => 'settings',
    );

    $form['open311']['ntxuva_logic_open311_contact'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('ntxuva_logic_open311_contact', ntxuva_logic_defaults('ntxuva_logic_open311_contact')),
      '#title' => t('Open311 Contact Details'),
    );
    $form['open311']['ntxuva_logic_open311_type'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('ntxuva_logic_open311_type', ntxuva_logic_defaults('ntxuva_logic_open311_type')),
      '#title' => t('Open311 Server type. Either "production" or "test" defines whether the information is live and will be acted upon'),
    );
    $form['open311']['ntxuva_logic_open311_key_service'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('ntxuva_logic_open311_key_service', ntxuva_logic_defaults('ntxuva_logic_open311_key_service')),
      '#title' => t('Human readable information on how to get an API key'),
    );
    $form['open311']['ntxuva_logic_open311_changeset'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('ntxuva_logic_open311_changeset', ntxuva_logic_defaults('ntxuva_logic_open311_changeset')),
      '#title' => t('Sortable field that specifies the last time this document was updated'),
    );
    $form['open311']['ntxuva_logic_open311_node_options_status'] = array(
      '#type' => 'radios',
      '#default_value' => variable_get('ntxuva_logic_open311_node_options_status', ntxuva_logic_defaults('ntxuva_logic_open311_node_options_status')),
      '#options' => array(t('Unpublished'), t('Published')),
      '#title' => t('Choose the publish status of incoming reports'),
    );

    $form['open311']['ntxuva_logic_open311_status_open_start'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => ntxuva_logic_get_taxonomy_term_options('status'),
      '#default_value' => variable_get('ntxuva_logic_open311_status_open_start', ntxuva_logic_defaults('ntxuva_logic_open311_status_open_start')),
      '#title' => t('Choose the status that gets applied when creating reports by third party apps'),
    );

    $form['open311']['ntxuva_logic_open311_status_open'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => ntxuva_logic_get_taxonomy_term_options('status'),
      '#default_value' => variable_get('ntxuva_logic_open311_status_open', ntxuva_logic_defaults('ntxuva_logic_open311_status_open')),
      '#title' => t('Please choose the status for open reports'),
    );

    $form['open311']['ntxuva_logic_open311_status_closed'] = array(
      '#type' => 'select',
      '#multiple' => TRUE,
      '#options' => ntxuva_logic_get_taxonomy_term_options('status'),
      '#default_value' => variable_get('ntxuva_logic_open311_status_closed', ntxuva_logic_defaults('ntxuva_logic_open311_status_closed')),
      '#title' => t('Please choose the status for closed reports'),
    );
  }
  if (module_exists('ntxuva_uuid')) {
    $form['uuid'] = array(
      '#type' => 'fieldset',
      '#title' => t('Auto Title and UUID'),
      '#collapsible' => TRUE,
      '#description' => t('The Ntxuva-Mopa UUID Module is enabled, so that service requests are "auto-titled" with the chosen service name
        plus an unique ID. This can be useful in an Open311 service oriented architecture.
        You can <a href="@module-page#edit-modules-mark-a-spot">disable</a> this module at any time, if you prefer user-generated node titles.', array('@module-page' => url('admin/modules'))),
      '#group' => 'settings',
    );
    $form['uuid']['ntxuva_logic_uuid_title'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display UUID in title?'),
      '#default_value' => variable_get('ntxuva_logic_uuid_title', ntxuva_logic_defaults('ntxuva_logic_uuid_title')),
    );
    $form['uuid']['ntxuva_logic_title_pattern'] = array(
      '#type' => 'radios',
      '#title' => t('How should titles appear in report nodes?'),
      '#default_value' => variable_get('ntxuva_logic_title_pattern', ntxuva_logic_defaults('ntxuva_logic_title_pattern')),
      '#options' => array(t('Service Name #3e80-67'), t('#3e80-67 Service Name')),
    );
    $form['uuid']['ntxuva_logic_uuid_pattern'] = array(
      '#type' => 'radios',
      '#title' => t('Choose the UUID pattern.'),
      '#default_value' => variable_get('ntxuva_logic_uuid_pattern', ntxuva_logic_defaults('ntxuva_logic_uuid_pattern')),
      '#options' => array(t('#3e80-67'), t('#3e8031-67'), t('#3e8031b0-67'), t('PHP date'), t('Other')),
    );
    $form['uuid']['ntxuva_logic_uuid_prefix'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('ntxuva_logic_uuid_prefix', ntxuva_logic_defaults('ntxuva_logic_uuid_prefix')),
      '#title' => t('In case you want to have no hex code in an multi-stage environment you could just add a string here, but make sure nodes stay unique'),
    );
    $form['uuid']['ntxuva_logic_uuid_offset'] = array(
      '#type' => 'textfield',
      '#default_value' => variable_get('ntxuva_logic_uuid_offset', ntxuva_logic_defaults('ntxuva_logic_uuid_offset')),
      '#title' => t('Decrease the ID by this Integer to make production projects start with #1'),
    );
  }

  if (module_exists('ntxuva_archive')) {
    $form['archive'] = array(
      '#type' => 'fieldset',
      '#title' => t('Archive Settings'),
      '#collapsible' => TRUE,
      '#description' => t('Set the period in days since reports have been last edited. Closed reports earlier than this period will be archived automatically'),
      '#group' => 'settings',
    );
    $form['archive']['ntxuva_logic_archive_days'] = array(
      '#type' => 'textfield',
      '#size' => '2',
      '#maxlength' => '2',
      '#default_value' => variable_get('ntxuva_logic_archive_days', ntxuva_logic_defaults('ntxuva_logic_archive_days')),
      '#title' => t('Days'),
    );
  }

  if (module_exists('ntxuva_static_geojson')) {
    $form['static'] = array(
      '#type' => 'fieldset',
      '#title' => t('Static JSON Settings'),
      '#collapsible' => TRUE,
      '#description' => t('Enable creation of a static geojson file on updating and creating reports. This maybe needs more resources of your server and may slow down saving nodes'),
      '#group' => 'settings',

    );
    $form['static']['ntxuva_logic_static_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable static file update?'),
      '#default_value' => variable_get('ntxuva_logic_static_node', ntxuva_logic_defaults('ntxuva_logic_static_node')),
    );
  }

  if(module_exists('ntxuva_radar')) {
    $form['radar'] = array(
      '#type' => 'fieldset',
      '#title' => t('Ntxuva-Mopa Radar'),
      '#collapsible' => TRUE,
      '#group' => 'settings',
    );


    $form['radar']['ntxuva_logic_radar_zoom'] = array(
      '#type' => 'select',
      '#title' => t('Map Zoom Setting'),
      '#options' => $zoom_options,
      '#default_value' => variable_get('ntxuva_logic_radar_zoom', ntxuva_logic_defaults('ntxuva_logic_radar_zoom')),
      '#description' => t('Set the map zoom value when radar report-spots will be visible to end user'),
    );
  }

  if (module_exists('ntxuva_tweet311')) {
    $form['twitter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Tweet311 Settings'),
      '#description' => t('Let Twitter-Users sending issues by sending mentions to') . ' ' . variable_get('ntxuva_logic_twittername') . '. ' . t('Tweet-location should be enabled. Tweets are applied to category-id by hashtag (#id)'),
      '#group' => 'settings',
    );

    $form['twitter']['ntxuva_logic_twittername'] = array(
      '#type' => 'textfield',
      '#title' => t('Twitter Name'),
      '#default_value' => variable_get('ntxuva_logic_twittername', ntxuva_logic_defaults('ntxuva_logic_twittername')),
      '#size' => '16',
      '#maxlength' => 16,
      '#description' => t('Which Twitter-Username will be searched for mentions'),
    );
    $form['twitter']['manual_import'] = array(
      '#markup' => '<p>' . l(t('Manually import tweets'), 'admin/config/system/ntxuva_mopa/tweets/import') . '</p>',
    );
    $form['twitter']['ntxuva_logic_tweetSearch'] = array(
      '#type' => 'radios',
      '#title' => t('Search in tweets for #hashtags or Service Code'),
      '#default_value' => variable_get('ntxuva_logic_twittername'),
      '#options' => array(t('Hash'), t('Service Code')),
    );
  }

  return system_settings_form($form);
}

/**
 * Implemments hook_page_alter().
 */
function ntxuva_logic_page_alter(&$page) {
  // Add help text to the user login block.
  $page['footer']['system_powered-by'] = array(
    '#weight' => -10,
    // Please be nice, give attribution:
    '#markup' => '<span>' . t('Built with <a id="mopa-link" href="http://mark-a-spot.org">Ntxuva-Mopa</a>') . '</span>',
  );
}


/**
 * Default texts for text variables that build the configuration page.
 */
function ntxuva_logic_defaults($id) {
  switch ($id) {
    case 'ntxuva_logic_ini_lat':
      return '50.8212596';

    case 'ntxuva_logic_ini_lng':
      return '6.8961028';

    case 'ntxuva_logic_address':
      return 'Pingsdorfer Straße 88, 50321 Brühl, Deutschland';

    case 'ntxuva_logic_city':
      return 'Brühl, Erftstadt';

    case 'ntxuva_logic_country':
      return 'Deutschland';

    case 'ntxuva_logic_twittername':
      return '@mopacity';

    case 'ntxuva_logic_ini_tweetSearch':
      return '1';

    case 'ntxuva_logic_bbox_nw_lat':
      return '50.8463';

    case 'ntxuva_logic_bbox_nw_lng':
      return '6.832';

    case 'ntxuva_logic_bbox_se_lat':
      return '50.8042';

    case 'ntxuva_logic_bbox_se_lng':
      return '6.937';

    case 'ntxuva_logic_archive_days':
      return '30';

    case 'ntxuva_locate_marker_color':
      return 'blue';

    case 'ntxuva_locate_icon_color':
      return 'white';

    case 'ntxuva_locate_zoom':
      return 16;

    case 'ntxuva_logic_static_node':
      return 0;

    case 'ntxuva_logic_uuid_title':
      return 1;

    case 'ntxuva_logic_uuid_pattern':
      return 0;

    case 'ntxuva_logic_uuid_prefix':
      return 'R';

    case 'ntxuva_logic_uuid_offset':
      return 0;

    case 'ntxuva_logic_title_pattern':
      return 0;

    case 'ntxuva_logic_map_type':
      return 2;

    case 'ntxuva_logic_open311_contact':
      return 'You can email or call for assistance api@mycity.org +1 (555) 555-5555';

    case 'ntxuva_logic_open311_node_options_status':
      return '1';

    case 'ntxuva_logic_open311_status_open_start':
      return array(5);

    case 'ntxuva_logic_open311_status_open':
      return array(5,6);

    case 'ntxuva_logic_open311_status_closed':
      return array(7,8);

    case 'ntxuva_logic_open311_changeset':
      return '2013-11-03 00:00';

    case 'ntxuva_logic_open311_key_service':
      return 'You can request a key here: http://api.mycity.gov/api_key/request';

    case 'ntxuva_logic_open311_type':
      return 'production';

    case 'ntxuva_logic_osm_custom_tile_url':
      return 'http://{s}.tile.osm.org/{z}/{x}/{y}.png';

    case 'ntxuva_logic_osm_custom_attribution':
      return 'Map Data © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors';

    case 'ntxuva_logic_radar_zoom':
      return '10';

    default:
      return FALSE;
  }
}


/**
 * Implements hook_block_info().
 */
function ntxuva_logic_block_info() {

  $blocks['taxonomy_category'] = array(
    'info' => t('Ntxuva-Mopa Categories'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['taxonomy_status'] = array(
    'info' => t('Ntxuva-Mopa Status'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  $blocks['ntxuva_map'] = array(
    // info: The name of the block.
    'info' => t('Ntxuva-Mopa reports List (Map View)'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function ntxuva_logic_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  $block = array();

  switch ($delta) {
    case 'taxonomy_category':
      $block['subject'] = t('Service Name');
      $block['content'] = ntxuva_logic_contents($delta);
      break;

    case 'taxonomy_status':
      $block['subject'] = t('Request Status');
      $block['content'] = ntxuva_logic_contents($delta);
      break;

    case 'ntxuva_map':
      $block['subject'] = t('reportList');
      $block['content'] = ntxuva_logic_contents($delta);
      break;
  }
  return $block;
}


/**
 * A module-defined block content function.
 */
function ntxuva_logic_contents($which_block) {
  switch ($which_block) {
    case 'taxonomy_category':
      $list_category = NULL;

      $list_category .= '<div class="category"><h3>' . t('Service Name') . ' </h3>';
      $list_category .= '<ul class="group-list">';
      $list_class = ' list-group-item';

      $alter['html'] = TRUE;
      $alter['max_length'] = 125;
      $alter['word_boundary'] = TRUE;
      $alter['ellipsis'] = TRUE;

      $list_category .= '<li class="marker-category-wrapper-all' . $list_class .' first">' . l(t('All'), '', array('attributes' => array('class' => 'map-menue-all marker-category'))) . '</li>';
      $taxonomies = taxonomy_get_tree(1, $parent = 0, $max_depth = 1, $load_entities = TRUE);
      foreach ($taxonomies as $term) {

        $icon_category = array(
          '#theme'  => 'icon',
          '#bundle' => $term->field_category_icon[LANGUAGE_NONE][0]['bundle'],
          '#icon'   => $term->field_category_icon[LANGUAGE_NONE][0]['icon'],
        );

        $list_category .= '<li class="marker-category-wrapper '. $list_class .'">' .  l(drupal_render($icon_category) . ' ' . views_trim_text($alter, check_plain($term->name)), 'taxonomy/term/' . $term->tid, array(
            'attributes' => array(
              'class' => 'map-menue marker-category col-' . ltrim($term->field_category_hex[LANGUAGE_NONE][0]['rgb'],'#'),
              'id' => 'tax-' . $term->tid,
            ),
            'html' => TRUE,
          )) . '</li>';
      }
      $list_category .= '</ul>';
      $list_category .= '</div>';

      return $list_category;

    case 'taxonomy_status':
      $list_status = NULL;

      $list_status .= '<div class="category"><h3>' . t('Status') . ' </h3>';
      $list_status .= '<ul class="group-list">';
      $list_class = ' list-group-item';

      $alter['html'] = TRUE;
      $alter['max_length'] = 25;
      $alter['word_boundary'] = TRUE;
      $alter['ellipsis'] = TRUE;

      $list_status .= '<li class="marker-status-wrapper-all '. $list_class .'">' . l(t('All'), '', array('attributes' => array('class' => 'map-menue-all marker-status'))) . '</li>';

      $taxonomies = taxonomy_get_tree(2, $parent = 0, $max_depth = 1, $load_entities = TRUE);
      foreach ($taxonomies as $term) {

        $icon_status = array(
          '#theme'  => 'icon',
          '#bundle' => $term->field_status_icon[LANGUAGE_NONE][0]['bundle'],
          '#icon'   => $term->field_status_icon[LANGUAGE_NONE][0]['icon'],
        );

        $list_status .= '<li class="marker-status-wrapper ' . $list_class  .'">' .  l(drupal_render($icon_status) . ' ' . views_trim_text($alter, check_plain($term->name)), 'taxonomy/term/' . $term->tid, array(
            'attributes' => array(
              'class' => 'map-menue marker-status col-' . ltrim($term->field_status_hex[LANGUAGE_NONE][0]['rgb'],'#'),
              'id' => 'tax-' . $term->tid,
            ),
            'html' => TRUE,
          )) . '</li>';
      }
      $list_status .= '</ul>';
      $list_status .= '</div>';

      return $list_status;

    case 'ntxuva_map':
      $list_map = NULL;
      $list_map = '<ul id="markersidebar"></ul>';
      return $list_map;

    default:
      return FALSE;
  }
}


/**
 * Implements hook_entity_info_alter().
 */
function ntxuva_logic_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['report_list'] = array(
    'label' => t('Report List'),
    'custom settings' => TRUE,
  );
}


/**
 * Implements hook_preprocess_node().
 */
function ntxuva_logic_preprocess_node(&$vars) {
  if ($vars['view_mode'] == 'report_list') {
    $vars['theme_hook_suggestions'][] = 'node__' . $vars['type'] . '__report_list';
  }
  return $vars;
}

/**
 * helper function to get taxonomy term options for select widget
 * @arguments string $machine_name: taxonomy machine name
 * @return array of select options for form
 */
function ntxuva_logic_get_taxonomy_term_options($machine_name){
  $options = array();

  $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;

  $options_source = taxonomy_get_tree($vid);

  foreach($options_source as $item ) {
    $key = $item->tid;
    $value = $item->name;
    $options[$key] = $value;
  }

  return $options;
}
