<?php
/**
 * @file
 * Ntxuva Log module.
 * This module provides a log per report saving actions by
 * citizens and administration
 */

/**
 * This module logs and shows logging of node (reports) actions.
 * toDo ... convert to entity-api? http://drupal.org/node/1026420
 *
 * @author Holger Kreis - holger@ntxuva.org
 */

/**
 * Implements hook_permission().
 */
function ntxuva_log_permission() {
  return array(
    'administer mopalogs' => array(
      'title' => t('Administer Ntxuva Logs'),
      'restrict access' => TRUE,
    ),
    'view mopalogs' => array(
      'title' => t('View Ntxuva Logs'),
    ),
  );
}


/**
 * Implements hook_field_extra_fields().
 */
function ntxuva_log_field_extra_fields() {
  $return = array();
  $return['mopalog']['mopalog'] = array(
    'form' => array(
      'note' => array(
        'label' => t('Note'),
        'description' => t('Ntxuva Note'),
      ),
    ),
  );

  return $return;
}


/**
 * Implements hook_block_info().
 */
function ntxuva_log_block_info() {
  $blocks['ntxuva_activity'] = array(
    'info' => t('Ntxuva: Show Activity for a report'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 * see http://drupal.org/node/1104498
 */
function ntxuva_log_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'ntxuva_activity':
      $block['subject'] = t('Mopa Activity Log');

      if (user_access('view mopalogs')) {
        $node = menu_get_object();
        // var_dump($node);
        if (isset($node) && $node->type == "report") {
          $result = ntxuva_log_get_log($node->nid);
        }
        else {
          return NULL;
        }

        $items = array();

        foreach ($result as $log) {
          $items[] = array(
            'data' => '<span class="log-entry">' . $log->message . ' </span><br/>' . t('<span class="meta-info">@time ago</span>', array('@time' => format_interval(REQUEST_TIME - $log->modified))),
          );
        }
        if (empty($items)) {
          // No content in the last week.
          $block['content'] = t('No log available.');
        }
        else {
          // Pass data through theme function.
          $block['content'] = theme('item_list', array(
            'items' => $items,
          ));
        }
      }
      break;
  }
  return $block;
}


/**
 * Creates Log entry according to role.
 *
 * @param object $node
 *   The node object
 */
function ntxuva_log_node_insert($node) {

  $data = new stdClass();

  // Preparing Logging to Mopa_log table (don't think of watchdog):
  global $user;

  if (!in_array('administrator', $user->roles) ||
    !in_array('Management', $user->roles) || !in_array('City Admin', $user->roles)) {
    $data = array(
      'message' => t('The report has been created by Citizen'),
      'level'  => 'danger',
      'css_class'   => 'edit',
    );
  }

  if (in_array('administrator', $user->roles) ||
    in_array('Management', $user->roles) || in_array('City Admin', $user->roles)) {

    if (isset($node->nid)) {
      $data = array(
        'message' => t('The report has been edited/created by Administration'),
        'level'  => 'warning',
        'css_class'   => 'edit',
      );
    }
    else {
      $data = array(
        'message' => t('The report has been created.'),
        'level'  => 'danger',
        'css_class'   => 'edit',
      );
    }
  }
  $data = (object) $data;

  unset($data->nid);

  $data->uid = $user->uid;
  $data->nid = $node->nid;

  $data->created = time();
  $data->modified = time();

  ntxuva_log_write_log($data);
}


/**
 * Creates Log entry according to role.
 */
function ntxuva_log_node_update($node) {
  $data = new stdClass();
  global $user;

  if (!in_array('Management', $user->roles) || !in_array('administrator', $user->roles) && $node->type == 'report') {

    if ($node->nid) {
      $data = array(
        'message' => t('The report has been edited by Citizen'),
        'level'  => 'warning',
        'css_class'   => 'edit',
      );
    }
  }

  if (in_array('administrator', $user->roles) ||
    in_array('Management', $user->roles) || in_array('City Admin', $user->roles)) {

    if ($node->nid) {
      $data = array(
        'message' => t('The report has been edited by City Administration'),
        'level'  => 'success',
        'css_class'   => 'check',
      );
    }
  }
  $data = (object) $data;

  unset($data->nid);

  $data->uid = $user->uid;
  $data->nid = $node->nid;

  $data->created = time();
  $data->modified = time();
  ntxuva_log_write_log($data);
}

/**
 * Implements hook_node_delete().
 */
function ntxuva_log_node_delete($node) {
  $nid = $node->nid;
  db_delete('ntxuva_log')->condition('nid', $nid)->execute();
}


/**
 * Implements hook_comment_presave().
 */
function ntxuva_log_comment_presave($comment) {
  $data = new stdClass();

  // Preparing Logging to Mopa_log table (don't think of watchdog):
  global $user;

  if (!isset($comment->node_type)) {
    $node = node_load($comment->nid);
    $comment->node_type = 'comment_node_' . $node->type;
  }

  if (in_array('administrator', $user->roles)) {
    $data = array(
      'message' => t('The Site Administration commented this report.'),
      'level'  => 'warning',
      'css_class'   => 'comment',
    );
  }

  else if (in_array('Management', $user->roles) || in_array('City Admin', $user->roles)) {
    $data = array(
      'message' => t('The City Administration commented this report.'),
      'level'  => 'warning',
      'css_class'   => 'comment',
    );
  }

  else if (in_array('Citizen', $user->roles) || in_array('anonymous user', $user->roles)) {
    $data = array(
      'message' => t('A Citizen commented this report.'),
      'level'  => 'danger',
      'css_class'   => 'comment',
    );
  }

  else {
    $data = array(
      'message' => t('Someone commented this report'),
      'level'  => 'danger',
      'css_class'   => 'comment',
    );
  }

  $data = (object) $data;

  unset($data->nid);

  $data->uid = $user->uid;
  $data->nid = $comment->nid;

  $data->created = time();
  $data->modified = time();

  ntxuva_log_write_log($data);
}


/**
 * Adds user to Citizen Role.
 *
 * @param string $role_name
 *   The role name
 *
 * @param int $uid
 *   The user id
 */
function ntxuva_log_add_role_to_user($role_name, $uid) {
  $results = db_select('users_roles', 'ur')
    ->fields('ur', array('rid'))
    ->condition('ur.uid', $uid)
    ->execute();

  $_add_to_user = TRUE;
  if ($results->rowCount() > 0) {
    // Check to see if the user already has this role assigned to them:
    foreach ($results as $rid) {
      $name = user_role_load($rid->rid)->name;
      if ($name == $role_name) {
        $_add_to_user = FALSE;
      }
    }
  }

  if ($_add_to_user) {
    $rid = user_role_load_by_name($role_name)->rid;
    // var_dump(user_role_load_by_name($role_name));
    db_insert('users_roles')
      ->fields(array(
        'uid' => $uid,
        'rid' => $rid,
      ))
      ->execute();
  }
}


/**
 * Gets log-entries object by nid.
 *
 * @param int $nid
 *   The node id
 *
 * @return object
 *   $result
 */
function ntxuva_log_get_log($nid) {
  $result = db_query('SELECT * FROM {ntxuva_log} WHERE nid = :nid', array(
    ':nid' => $nid));
  return $result;
}

/**
 * Writes a log entry to the database.
 *
 * @param object $data
 *   The comment entry
 */
function ntxuva_log_write_log($data) {
  drupal_write_record('ntxuva_log', $data);
}

/**
 * Deletes a note from the database.
 *
 * @param int $lid
 *   The Log id
 */
function ntxuva_log_delete_log($lid) {
  db_delete('node')->condition('id', $lid)->execute();
}


/**
 * Implements hook_views_api().
 */
function ntxuva_log_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ntxuva_log') . '/views',
  );
}